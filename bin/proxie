#!/usr/bin/env ruby

lib = File.expand_path(File.dirname(__FILE__) + '/../lib')
$LOAD_PATH.unshift(lib) if File.directory?(lib) && !$LOAD_PATH.include?(lib)

require 'rubygems'
require 'sequel'
require 'optparse'
require 'cgi'
require 'proxie'

Proxie.init

options = {
  :port   => 8080,
  :db     => "db_#{Time.now.to_i}",
  :listen => true
}

optparse = OptionParser.new do |opts|
  opts.banner = "Proxie v#{Proxie::VERSION}\nUsage: proxie [options]"
  opts.on('-i', '--info', 'Display this information.')    { puts opts; exit }  
  opts.on('-p', '--port PORT', 'Listen on port')          { |v| options[:port] = v }  
  opts.on('-d', '--db NAME', 'Store results to database') { |v| options[:db] = v }
  opts.on('-w', '--web', 'Start a Web UI for databases')  { options[:listen] = false }
  opts.on('-f', '--flush', 'Delete all local databases')  do
    puts "Deleting databases..."
    Dir.glob("#{Proxie.root}/*.sqlite").each do |f|
      puts "-> #{File.basename(f)} : #{File.delete(f)}"
    end
    exit
  end
end

begin
  optparse.parse!
  if options[:listen]
    server = Proxie::Server.new(options[:port])
    server.logger = Proxie::SQLiteLogger.new("#{Proxie.root}/#{options[:db]}.sqlite")
    trap("INT") { server.stop }
    server.start
  end
rescue OptionParser::InvalidOption, OptionParser::MissingArgument
  puts optparse
rescue RuntimeError => err
  puts "ERROR: #{err.message}"
end

require 'proxie/web' if !options[:listen]